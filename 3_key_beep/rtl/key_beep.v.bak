module top_key_beep(
    input      sys_clk,
    input      sys_rst_n,
    input      key,
    output     beep
);

wire key_value;
wire key_flag;


key_debounce u_key_debounce(
    .sys_clk        (sys_clk),
    .sys_rst_n      (sys_rst_n),
    .key            (key),
    .key_flag       (key_flag),
    .key_value      (key_value)
);

beep_control u_beep_control(
    .sys_clk        (sys_clk),
    .sys_rst_n      (sys_rst_n),
    .key_value      (key_value),
    .key_flag       (key_flag),
    .beep           (beep)
);

endmodule

module key_debounce(
    input       sys_clk,
    input       sys_rst_n,
    input       key,
    output  reg key_flag,
    output  reg key_value
);

reg [31:0]  delay_cnt;
reg         key_reg;

always @(posedge sys_clk or negedge sys_rst_n) begin
    if(!sys_rst_n) begin
        key_reg     <= 1'b1;
        delay_cnt   <= 32'd0;
    end
    else begin
       key_reg  <= key;
       if(key_reg!=key)
            delay_cnt <= 32'd1_000_000
        else if(key_reg==key) begin
           if(delay_cnt>32'd0)
                delay_cnt <= delay_cnt -1'b1;
            else
                delay_cnt <= delay_cnt; 
        end
    end
end

always @(posedge sys_clk or negedge sys_rst_n) begin
    if(!sys_rst_n) begin
        key_flag    <= 1'b0;
        key_value   <= 4'b11;
    end
    else begin
       if(delay_cnt==32'd1) begin
           key_flag     <= 1'b1;
           key_value    <= key;
       end 
       else begin
           key_flag     <= 1'b0;
           key_value    <= key_value;
       end
    end
end

module beep_control(
    input           sys_clk,
    input           sys_rst_n,
    input           key_flag,
    input           key_value,
    output  [reg]   beep
);

always @(posedge sys_clk or negedge sys_rst_n) begin
    if(!sys_rst_n)
        beep <= 1'b1;
    else if(key_flag&&(~key_value))
        beep <= ~beep;
end

endmodule